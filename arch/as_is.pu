@startuml as_is
!theme materia
skinparam componentStyle uml2

title AS_IS

agent Client
agent SuperUser
card NGINX
card Jaeger
database ElasticsearchMovies


node AdminService {
    frame DjangoAdmin {
        component DjangoAPI
        component DjangoAdminPanel
    }

    database PostgresMovies

    frame PostgresToElasticETL {
        database CurrentState
        file Extract
        file Transform
        file Load

        CurrentState -down-> Extract: получение состояния
        Load -> CurrentState: сохранение состояния
        
        Extract -right-> Transform
        Transform -right-> Load
    }
}


node AsyncService {
    database AsyncRedisCache
    frame AsyncAPI {
        component Async_Services
        file AsyncTracer
    }

    Async_Services <-> AsyncRedisCache: кэширование
    Async_Services -> AsyncTracer: трейсы
    AsyncTracer -> Jaeger: трейсы
}


node AuthService {
    database Users
    database AuthRedisCache
    frame AuthAPI {
        component Auth_Services
        file AuthTracer
        cloud OAuth2 {
            component Yandex
            component VK
        }
    }
    
    Auth_Services <--> Users: данные о пользователях
    Auth_Services <--> AuthTracer: трейсы
    Auth_Services <--> OAuth2: авторизация через соц сети
    Auth_Services <--> AuthRedisCache: кэширование
    
    AuthTracer -> Jaeger: трейсы
}

Client <--> NGINX 
SuperUser <--> NGINX
NGINX <--> DjangoAdminPanel
NGINX <.[#Purple].> DjangoAPI
NGINX <--> AsyncAPI
NGINX <--> AuthAPI
NGINX <..> Jaeger

PostgresMovies -up-> Extract
PostgresMovies <.[#Purple].> DjangoAPI
PostgresMovies <--> DjangoAdminPanel

Load -right-> ElasticsearchMovies
ElasticsearchMovies <--> Async_Services
ElasticsearchMovies <.[#Purple].> DjangoAPI

SuperUser <.> Jaeger

@enduml